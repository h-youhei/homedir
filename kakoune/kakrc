### line number ###
add-highlighter global/ number-lines -relative -hlcursor -separator ' '

### format ###
set-option global tabstop 4
set-option global indentwidth 0

### screen ###
set-option global ui_options ncurses_assistant=none
set-option global scrolloff 1,0

add-highlighter global/ show-matching

### hlsearch
#add-highlighter global/ dynregex '%reg{/}' 0:default,+r

### hidden characters ###
add-highlighter global/ show-whitespaces -lf ' ' -tab '>' -tabpad '_' -spc ' '
add-highlighter shared/space-warning group
#'trailing space'
add-highlighter shared/space-warning/trailing-space regex \h+$ 0:Error
define-command trim-trailing-spaces %{
	execute-keys 's\h+$<ret>d'
}
#'mix tab and space'
add-highlighter shared/space-warning/space-after-tab regex ^\t+\u0020+ 0:Error
add-highlighter shared/space-warning/tab-after-space regex ^\u0020+\t+ 0:Error
#'fullwidth space'
add-highlighter shared/space-warning/fullwidth-space regex \u3000 0:Error
define-command -docstring 'replace spaces full-width to half-width' \
replace-spaces-full-to-half %{
	execute-keys 's\u3000<ret>r<space>'
}

# don't highlight in insert mode
add-highlighter global/ ref space-warning
hook global ModeChange normal:insert %{
	remove-highlighter global/ref_space-warning
}
hook global  ModeChange insert:normal %{
	add-highlighter global/ ref space-warning
}

### status line ###
set-option global modelinefmt '{{context_info}} {{mode_info}} %val{bufname} (%val{cursor_char_column},%val{cursor_line}/%val{buf_line_count}) %val{client}@%val{session}'

### auto mkdir ###
hook global BufWritePre .* %{ nop %sh{
	dir=`dirname $kak_buffile`
	[ -d $dir ] || mkdir -p $dir
}}

### auto indent ###
hook -group auto-indent global InsertChar \n %{ try %{ execute-keys -draft  \;K<a-&> } }
hook global WinSetOption filetype=.* %{ remove-hooks global auto-indent }

### external tools ###
set-option global grepcmd 'rg --with-filename --column'
set-option global termcmd 'xterm -e sh -c'

set-option global jumpclient main
set-option global toolsclient tools
set-option global docsclient docs

define-command view %{
	new rename-client docs
}
define-command ide %{
	rename-client main
	new rename-client tools
}
define-command -docstring 'open new terminal in current directory' \
open-terminal %{ %sh{
	xterm > /dev/null 2>&1 &
	echo nop
}}
alias global t open-terminal

### git ###
define-command -docstring 'edit selected file in the git repository' -params 1 \
-shell-script-candidates %{ git ls-files `git rev-parse --show-toplevel` } \
git-edit %{
	edit %arg{1}
}
alias global ge git-edit

define-command -docstring 'open new terminal in the git root' \
git-open-terminal %{ %sh{
	cd `git rev-parse --show-toplevel`
	xterm > /dev/null 2>&1 &
	echo nop
}}
alias global gt git-open-terminal

### filetype ###
define-command -hidden _git-commit-start-insert-but-amend %{
	try %{
		execute-keys 's[^\n]<ret>'
	} catch %{
		execute-keys -with-hooks i
	}
}
hook global WinDisplay .* %{ evaluate-commands %sh{
	if [ "$kak_opt_filetype" = git-commit ] ; then
		echo _git-commit-start-insert-but-amend
	else
		echo nop
	fi
}}

define-command -params 1 plug %{
	source "%val{config}/plugin/%arg{1}.kak"
}
source "%val{config}/keymap.kak"
source "%val{config}/color.kak"

### input method
plug ibus
set-option global ibus_on 'mozc-jp'
setup-ibus-auto-switch

plug numlock
set-option global ibus_callback_on 'numlock-turn-on'
set-option global ibus_callback_off 'numlock-turn-off'

plug capslock
setup-capslock-auto-switch

#%sh{
	#autoload_directory() {
		#find -L "$1" -type f -name '*\.kak' \
			#-exec printf 'try %%{ source "%s" } catch %%{ echo -debug Autoload: could not load "%s" }\n' '{}' '{}' \;
	#}

	#if [ -d "$kak_config/autoload-after" ]; then
		#autoload_directory "$kak_config/autoload-after"
	#fi
#}

